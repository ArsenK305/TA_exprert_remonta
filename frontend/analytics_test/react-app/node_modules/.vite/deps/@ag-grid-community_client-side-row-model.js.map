{
  "version": 3,
  "sources": ["../../@ag-grid-community/client-side-row-model/dist/package/main.esm.mjs"],
  "sourcesContent": ["// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nimport { _defineModule } from \"@ag-grid-community/core\";\nimport { ModuleNames, RowModelHelperService, _CsrmSsrmSharedApiModule } from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nimport {\n  BeanStub,\n  ChangedPath,\n  ClientSideRowModelSteps,\n  RowHighlightPosition,\n  RowNode as RowNode2,\n  _debounce,\n  _errorOnce as _errorOnce2,\n  _exists,\n  _getGrandTotalRow,\n  _getGroupSelectsDescendants,\n  _getGroupTotalRowCallback,\n  _getRowHeightForNode,\n  _insertIntoArray,\n  _isAnimateRows,\n  _isDomLayout,\n  _last,\n  _missing,\n  _missingOrEmpty as _missingOrEmpty2,\n  _removeFromArray\n} from \"@ag-grid-community/core\";\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideNodeManager.ts\nimport {\n  RowNode,\n  _cloneObject,\n  _errorOnce,\n  _getRowIdCallback,\n  _missingOrEmpty,\n  _warnOnce\n} from \"@ag-grid-community/core\";\nvar ROOT_NODE_ID = \"ROOT_NODE_ID\";\nvar TOP_LEVEL = 0;\nvar ClientSideNodeManager = class {\n  constructor(rootNode, gos, eventService, funcColsService, selectionService, beans) {\n    this.nextId = 0;\n    // has row data actually been set\n    this.rowCountReady = false;\n    // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n    this.allNodesMap = {};\n    this.rootNode = rootNode;\n    this.gos = gos;\n    this.eventService = eventService;\n    this.funcColsService = funcColsService;\n    this.beans = beans;\n    this.selectionService = selectionService;\n    this.rootNode.group = true;\n    this.rootNode.level = -1;\n    this.rootNode.id = ROOT_NODE_ID;\n    this.rootNode.allLeafChildren = [];\n    this.rootNode.childrenAfterGroup = [];\n    this.rootNode.childrenAfterSort = [];\n    this.rootNode.childrenAfterAggFilter = [];\n    this.rootNode.childrenAfterFilter = [];\n  }\n  getCopyOfNodesMap() {\n    return _cloneObject(this.allNodesMap);\n  }\n  getRowNode(id) {\n    return this.allNodesMap[id];\n  }\n  setRowData(rowData) {\n    if (typeof rowData === \"string\") {\n      _warnOnce(\"rowData must be an array.\");\n      return;\n    }\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowData);\n    const rootNode = this.rootNode;\n    const sibling = this.rootNode.sibling;\n    rootNode.childrenAfterFilter = null;\n    rootNode.childrenAfterGroup = null;\n    rootNode.childrenAfterAggFilter = null;\n    rootNode.childrenAfterSort = null;\n    rootNode.childrenMapped = null;\n    rootNode.updateHasChildren();\n    this.nextId = 0;\n    this.allNodesMap = {};\n    if (rowData) {\n      rootNode.allLeafChildren = rowData.map(\n        (dataItem, index) => this.createNode(dataItem, this.rootNode, TOP_LEVEL, index)\n      );\n    } else {\n      rootNode.allLeafChildren = [];\n      rootNode.childrenAfterGroup = [];\n    }\n    if (sibling) {\n      sibling.childrenAfterFilter = rootNode.childrenAfterFilter;\n      sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      sibling.childrenAfterAggFilter = rootNode.childrenAfterAggFilter;\n      sibling.childrenAfterSort = rootNode.childrenAfterSort;\n      sibling.childrenMapped = rootNode.childrenMapped;\n      sibling.allLeafChildren = rootNode.allLeafChildren;\n    }\n  }\n  updateRowData(rowDataTran) {\n    this.rowCountReady = true;\n    this.dispatchRowDataUpdateStartedEvent(rowDataTran.add);\n    const updateRowDataResult = {\n      rowNodeTransaction: { remove: [], update: [], add: [] },\n      rowsInserted: false\n    };\n    const nodesToUnselect = [];\n    this.executeRemove(rowDataTran, updateRowDataResult, nodesToUnselect);\n    this.executeUpdate(rowDataTran, updateRowDataResult, nodesToUnselect);\n    this.executeAdd(rowDataTran, updateRowDataResult);\n    this.updateSelection(nodesToUnselect, \"rowDataChanged\");\n    return updateRowDataResult;\n  }\n  /**\n   * Used by the immutable service, after updateRowData, after updating with a generated transaction to\n   * apply the order as specified by the the new data. We use sourceRowIndex to determine the order of the rows.\n   * Time complexity is O(n) where n is the number of rows/rowData\n   * @returns true if the order changed, otherwise false\n   */\n  updateRowOrderFromRowData(rowData) {\n    const rows = this.rootNode.allLeafChildren;\n    const rowsLength = rows?.length ?? 0;\n    const rowsOutOfOrder = /* @__PURE__ */ new Map();\n    let firstIndexOutOfOrder = -1;\n    let lastIndexOutOfOrder = -1;\n    for (let i = 0; i < rowsLength; ++i) {\n      const row = rows[i];\n      const data = row.data;\n      if (data !== rowData[i]) {\n        if (lastIndexOutOfOrder < 0) {\n          firstIndexOutOfOrder = i;\n        }\n        lastIndexOutOfOrder = i;\n        rowsOutOfOrder.set(data, row);\n      }\n    }\n    if (firstIndexOutOfOrder < 0) {\n      return false;\n    }\n    for (let i = firstIndexOutOfOrder; i <= lastIndexOutOfOrder; ++i) {\n      const row = rowsOutOfOrder.get(rowData[i]);\n      if (row !== void 0) {\n        rows[i] = row;\n        row.sourceRowIndex = i;\n      }\n    }\n    return true;\n  }\n  isRowCountReady() {\n    return this.rowCountReady;\n  }\n  dispatchRowDataUpdateStartedEvent(rowData) {\n    this.eventService.dispatchEvent({\n      type: \"rowDataUpdateStarted\",\n      firstRowData: rowData?.length ? rowData[0] : null\n    });\n  }\n  updateSelection(nodesToUnselect, source) {\n    const selectionChanged = nodesToUnselect.length > 0;\n    if (selectionChanged) {\n      this.selectionService.setNodesSelected({\n        newValue: false,\n        nodes: nodesToUnselect,\n        suppressFinishActions: true,\n        source\n      });\n    }\n    this.selectionService.updateGroupsFromChildrenSelections(source);\n    if (selectionChanged) {\n      this.eventService.dispatchEvent({\n        type: \"selectionChanged\",\n        source\n      });\n    }\n  }\n  executeAdd(rowDataTran, result) {\n    const add = rowDataTran.add;\n    if (_missingOrEmpty(add)) {\n      return;\n    }\n    const allLeafChildren = this.rootNode.allLeafChildren;\n    let addIndex = allLeafChildren.length;\n    if (typeof rowDataTran.addIndex === \"number\") {\n      addIndex = this.sanitizeAddIndex(rowDataTran.addIndex);\n      if (addIndex > 0) {\n        const isTreeData = this.gos.get(\"treeData\");\n        if (isTreeData) {\n          for (let i = 0; i < allLeafChildren.length; i++) {\n            const node = allLeafChildren[i];\n            if (node?.rowIndex == addIndex - 1) {\n              addIndex = i + 1;\n              break;\n            }\n          }\n        }\n      }\n    }\n    const newNodes = add.map(\n      (item, index) => this.createNode(item, this.rootNode, TOP_LEVEL, addIndex + index)\n    );\n    if (addIndex < allLeafChildren.length) {\n      const nodesBeforeIndex = allLeafChildren.slice(0, addIndex);\n      const nodesAfterIndex = allLeafChildren.slice(addIndex, allLeafChildren.length);\n      const nodesAfterIndexFirstIndex = nodesBeforeIndex.length + newNodes.length;\n      for (let index = 0, length = nodesAfterIndex.length; index < length; ++index) {\n        nodesAfterIndex[index].sourceRowIndex = nodesAfterIndexFirstIndex + index;\n      }\n      this.rootNode.allLeafChildren = [...nodesBeforeIndex, ...newNodes, ...nodesAfterIndex];\n      result.rowsInserted = true;\n    } else {\n      this.rootNode.allLeafChildren = allLeafChildren.concat(newNodes);\n    }\n    const sibling = this.rootNode.sibling;\n    if (sibling) {\n      sibling.allLeafChildren = allLeafChildren;\n    }\n    result.rowNodeTransaction.add = newNodes;\n  }\n  sanitizeAddIndex(addIndex) {\n    const allChildrenCount = this.rootNode.allLeafChildren?.length ?? 0;\n    if (addIndex < 0 || addIndex >= allChildrenCount || Number.isNaN(addIndex)) {\n      return allChildrenCount;\n    }\n    return Math.ceil(addIndex);\n  }\n  executeRemove(rowDataTran, { rowNodeTransaction }, nodesToUnselect) {\n    const { remove } = rowDataTran;\n    if (_missingOrEmpty(remove)) {\n      return;\n    }\n    const rowIdsRemoved = {};\n    remove.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      if (rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      rowNode.clearRowTopAndRowIndex();\n      rowIdsRemoved[rowNode.id] = true;\n      delete this.allNodesMap[rowNode.id];\n      rowNodeTransaction.remove.push(rowNode);\n    });\n    this.rootNode.allLeafChildren = this.rootNode.allLeafChildren?.filter((rowNode) => !rowIdsRemoved[rowNode.id]) ?? null;\n    this.rootNode.allLeafChildren?.forEach((node, idx) => {\n      node.sourceRowIndex = idx;\n    });\n    const sibling = this.rootNode.sibling;\n    if (sibling) {\n      sibling.allLeafChildren = this.rootNode.allLeafChildren;\n    }\n  }\n  executeUpdate(rowDataTran, { rowNodeTransaction }, nodesToUnselect) {\n    const { update } = rowDataTran;\n    if (_missingOrEmpty(update)) {\n      return;\n    }\n    update.forEach((item) => {\n      const rowNode = this.lookupRowNode(item);\n      if (!rowNode) {\n        return;\n      }\n      rowNode.updateData(item);\n      if (!rowNode.selectable && rowNode.isSelected()) {\n        nodesToUnselect.push(rowNode);\n      }\n      this.setMasterForRow(rowNode, item, TOP_LEVEL, false);\n      rowNodeTransaction.update.push(rowNode);\n    });\n  }\n  lookupRowNode(data) {\n    const getRowIdFunc = _getRowIdCallback(this.gos);\n    let rowNode;\n    if (getRowIdFunc) {\n      const id = getRowIdFunc({ data, level: 0 });\n      rowNode = this.allNodesMap[id];\n      if (!rowNode) {\n        _errorOnce(`could not find row id=${id}, data item was not found for this id`);\n        return null;\n      }\n    } else {\n      rowNode = this.rootNode.allLeafChildren?.find((node) => node.data === data);\n      if (!rowNode) {\n        _errorOnce(`could not find data item as object was not found`, data);\n        _errorOnce(`Consider using getRowId to help the Grid find matching row data`);\n        return null;\n      }\n    }\n    return rowNode || null;\n  }\n  createNode(dataItem, parent, level, sourceRowIndex) {\n    const node = new RowNode(this.beans);\n    node.sourceRowIndex = sourceRowIndex;\n    node.group = false;\n    this.setMasterForRow(node, dataItem, level, true);\n    if (parent) {\n      node.parent = parent;\n    }\n    node.level = level;\n    node.setDataAndId(dataItem, this.nextId.toString());\n    if (this.allNodesMap[node.id]) {\n      _warnOnce(\n        `duplicate node id '${node.id}' detected from getRowId callback, this could cause issues in your grid.`\n      );\n    }\n    this.allNodesMap[node.id] = node;\n    this.nextId++;\n    return node;\n  }\n  setMasterForRow(rowNode, data, level, setExpanded) {\n    const isTreeData = this.gos.get(\"treeData\");\n    if (isTreeData) {\n      rowNode.setMaster(false);\n      if (setExpanded) {\n        rowNode.expanded = false;\n      }\n    } else {\n      const masterDetail = this.gos.get(\"masterDetail\");\n      if (masterDetail) {\n        const isRowMasterFunc = this.gos.get(\"isRowMaster\");\n        if (isRowMasterFunc) {\n          rowNode.setMaster(isRowMasterFunc(data));\n        } else {\n          rowNode.setMaster(true);\n        }\n      } else {\n        rowNode.setMaster(false);\n      }\n      if (setExpanded) {\n        const rowGroupColumns = this.funcColsService.getRowGroupColumns();\n        const numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n        const masterRowLevel = level + numRowGroupColumns;\n        rowNode.expanded = rowNode.master ? this.isExpanded(masterRowLevel) : false;\n      }\n    }\n  }\n  isExpanded(level) {\n    const expandByDefault = this.gos.get(\"groupDefaultExpanded\");\n    if (expandByDefault === -1) {\n      return true;\n    }\n    return level < expandByDefault;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModel.ts\nvar ClientSideRowModel = class extends BeanStub {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"rowModel\";\n    this.onRowHeightChanged_debounced = _debounce(this.onRowHeightChanged.bind(this), 100);\n    this.rowsToDisplay = [];\n    /** Has the start method been called */\n    this.hasStarted = false;\n    /** E.g. data has been set into the node manager already */\n    this.shouldSkipSettingDataOnStart = false;\n    /**\n     * This is to prevent refresh model being called when it's already being called.\n     * E.g. the group stage can trigger initial state filter model to be applied. This fires onFilterChanged,\n     * which then triggers the listener here that calls refresh model again but at the filter stage\n     * (which is about to be run by the original call).\n     */\n    this.isRefreshingModel = false;\n    this.rowCountReady = false;\n  }\n  wireBeans(beans) {\n    this.beans = beans;\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.selectionService = beans.selectionService;\n    this.valueCache = beans.valueCache;\n    this.environment = beans.environment;\n    this.filterStage = beans.filterStage;\n    this.sortStage = beans.sortStage;\n    this.flattenStage = beans.flattenStage;\n    this.groupStage = beans.groupStage;\n    this.aggregationStage = beans.aggregationStage;\n    this.pivotStage = beans.pivotStage;\n    this.filterAggregatesStage = beans.filterAggregatesStage;\n  }\n  postConstruct() {\n    const refreshEverythingFunc = this.refreshModel.bind(this, { step: ClientSideRowModelSteps.EVERYTHING });\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, {\n      step: ClientSideRowModelSteps.EVERYTHING,\n      // after cols change, row grouping (the first stage) could of changed\n      afterColumnsChanged: true,\n      keepRenderedRows: true,\n      // we want animations cos sorting or filtering could be applied\n      animate\n    });\n    this.addManagedEventListeners({\n      newColumnsLoaded: refreshEverythingAfterColsChangedFunc,\n      columnRowGroupChanged: refreshEverythingFunc,\n      columnValueChanged: this.onValueChanged.bind(this),\n      columnPivotChanged: this.refreshModel.bind(this, { step: ClientSideRowModelSteps.PIVOT }),\n      filterChanged: this.onFilterChanged.bind(this),\n      sortChanged: this.onSortChanged.bind(this),\n      columnPivotModeChanged: refreshEverythingFunc,\n      gridStylesChanged: this.onGridStylesChanges.bind(this),\n      gridReady: this.onGridReady.bind(this)\n    });\n    this.addPropertyListeners();\n    this.rootNode = new RowNode2(this.beans);\n    this.nodeManager = new ClientSideNodeManager(\n      this.rootNode,\n      this.gos,\n      this.eventService,\n      this.funcColsService,\n      this.selectionService,\n      this.beans\n    );\n  }\n  addPropertyListeners() {\n    const resetProps = /* @__PURE__ */ new Set([\"treeData\", \"masterDetail\"]);\n    const groupStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupDefaultExpanded\",\n      \"groupAllowUnbalanced\",\n      \"initialGroupOrderComparator\",\n      \"groupHideOpenParents\",\n      \"groupDisplayType\"\n    ]);\n    const filterStageRefreshProps = /* @__PURE__ */ new Set([\"excludeChildrenWhenTreeDataFiltering\"]);\n    const pivotStageRefreshProps = /* @__PURE__ */ new Set([\n      \"removePivotHeaderRowWhenSingleValueColumn\",\n      \"pivotRowTotals\",\n      \"pivotColumnGroupTotals\",\n      \"suppressExpandablePivotGroups\"\n    ]);\n    const aggregateStageRefreshProps = /* @__PURE__ */ new Set([\n      \"getGroupRowAgg\",\n      \"alwaysAggregateAtRootLevel\",\n      \"groupIncludeTotalFooter\",\n      \"suppressAggFilteredOnly\",\n      \"grandTotalRow\"\n    ]);\n    const sortStageRefreshProps = /* @__PURE__ */ new Set([\n      \"postSortRows\",\n      \"groupDisplayType\",\n      \"accentedSort\"\n    ]);\n    const filterAggStageRefreshProps = /* @__PURE__ */ new Set([]);\n    const flattenStageRefreshProps = /* @__PURE__ */ new Set([\n      \"groupRemoveSingleChildren\",\n      \"groupRemoveLowestSingleChildren\",\n      \"groupIncludeFooter\",\n      \"groupTotalRow\"\n    ]);\n    const allProps = [\n      ...resetProps,\n      ...groupStageRefreshProps,\n      ...filterStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...pivotStageRefreshProps,\n      ...aggregateStageRefreshProps,\n      ...sortStageRefreshProps,\n      ...filterAggStageRefreshProps,\n      ...flattenStageRefreshProps\n    ];\n    this.addManagedPropertyListeners(allProps, (params) => {\n      const properties = params.changeSet?.properties;\n      if (!properties) {\n        return;\n      }\n      const arePropertiesImpacted = (propSet) => properties.some((prop) => propSet.has(prop));\n      if (arePropertiesImpacted(resetProps)) {\n        this.setRowData(this.rootNode.allLeafChildren.map((child) => child.data));\n        return;\n      }\n      if (arePropertiesImpacted(groupStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.EVERYTHING });\n        return;\n      }\n      if (arePropertiesImpacted(filterStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER });\n        return;\n      }\n      if (arePropertiesImpacted(pivotStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n        return;\n      }\n      if (arePropertiesImpacted(aggregateStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n        return;\n      }\n      if (arePropertiesImpacted(sortStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.SORT });\n        return;\n      }\n      if (arePropertiesImpacted(filterAggStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.FILTER_AGGREGATES });\n        return;\n      }\n      if (arePropertiesImpacted(flattenStageRefreshProps)) {\n        this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n      }\n    });\n    this.addManagedPropertyListener(\"rowHeight\", () => this.resetRowHeights());\n  }\n  start() {\n    this.hasStarted = true;\n    if (this.shouldSkipSettingDataOnStart) {\n      this.dispatchUpdateEventsAndRefresh();\n    } else {\n      this.setInitialData();\n    }\n  }\n  setInitialData() {\n    const rowData = this.gos.get(\"rowData\");\n    if (rowData) {\n      this.shouldSkipSettingDataOnStart = true;\n      this.setRowData(rowData);\n    }\n  }\n  ensureRowHeightsValid(startPixel, endPixel, startLimitIndex, endLimitIndex) {\n    let atLeastOneChange;\n    let res = false;\n    do {\n      atLeastOneChange = false;\n      const rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n      const rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n      const firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n      const lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n      for (let rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n        const rowNode = this.getRow(rowIndex);\n        if (rowNode.rowHeightEstimated) {\n          const rowHeight = _getRowHeightForNode(this.gos, rowNode);\n          rowNode.setRowHeight(rowHeight.height);\n          atLeastOneChange = true;\n          res = true;\n        }\n      }\n      if (atLeastOneChange) {\n        this.setRowTopAndRowIndex();\n      }\n    } while (atLeastOneChange);\n    return res;\n  }\n  setRowTopAndRowIndex() {\n    const defaultRowHeight = this.environment.getDefaultRowHeight();\n    let nextRowTop = 0;\n    const displayedRowsMapped = /* @__PURE__ */ new Set();\n    const allowEstimate = _isDomLayout(this.gos, \"normal\");\n    for (let i = 0; i < this.rowsToDisplay.length; i++) {\n      const rowNode = this.rowsToDisplay[i];\n      if (rowNode.id != null) {\n        displayedRowsMapped.add(rowNode.id);\n      }\n      if (rowNode.rowHeight == null) {\n        const rowHeight = _getRowHeightForNode(this.gos, rowNode, allowEstimate, defaultRowHeight);\n        rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n      }\n      rowNode.setRowTop(nextRowTop);\n      rowNode.setRowIndex(i);\n      nextRowTop += rowNode.rowHeight;\n    }\n    return displayedRowsMapped;\n  }\n  clearRowTopAndRowIndex(changedPath, displayedRowsMapped) {\n    const changedPathActive = changedPath.isActive();\n    const clearIfNotDisplayed = (rowNode) => {\n      if (rowNode && rowNode.id != null && !displayedRowsMapped.has(rowNode.id)) {\n        rowNode.clearRowTopAndRowIndex();\n      }\n    };\n    const recurse = (rowNode) => {\n      clearIfNotDisplayed(rowNode);\n      clearIfNotDisplayed(rowNode.detailNode);\n      clearIfNotDisplayed(rowNode.sibling);\n      if (rowNode.hasChildren()) {\n        if (rowNode.childrenAfterGroup) {\n          const isRootNode = rowNode.level == -1;\n          const skipChildren = changedPathActive && !isRootNode && !rowNode.expanded;\n          if (!skipChildren) {\n            rowNode.childrenAfterGroup.forEach(recurse);\n          }\n        }\n      }\n    };\n    recurse(this.rootNode);\n  }\n  // returns false if row was moved, otherwise true\n  ensureRowsAtPixel(rowNodes, pixel, increment = 0) {\n    const indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n    const rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    if (rowNodeAtPixelNow === rowNodes[0]) {\n      return false;\n    }\n    const allLeafChildren = this.rootNode.allLeafChildren;\n    rowNodes.forEach((rowNode) => {\n      _removeFromArray(allLeafChildren, rowNode);\n    });\n    rowNodes.forEach((rowNode, idx) => {\n      _insertIntoArray(allLeafChildren, rowNode, Math.max(indexAtPixelNow + increment, 0) + idx);\n    });\n    rowNodes.forEach((rowNode, index) => {\n      rowNode.sourceRowIndex = index;\n    });\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate,\n      rowNodesOrderChanged: true\n      // We assume the order changed and we don't need to check if it really did\n    });\n    return true;\n  }\n  highlightRowAtPixel(rowNode, pixel) {\n    const indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n    const rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n    if (!rowNodeAtPixelNow || !rowNode || pixel == null) {\n      this.clearHighlightedRow();\n      return;\n    }\n    const highlight = this.getHighlightPosition(pixel, rowNodeAtPixelNow);\n    const isSamePosition = this.isHighlightingCurrentPosition(rowNode, rowNodeAtPixelNow, highlight);\n    const isDifferentNode = this.lastHighlightedRow != null && this.lastHighlightedRow !== rowNodeAtPixelNow;\n    if (isSamePosition || isDifferentNode) {\n      this.clearHighlightedRow();\n      if (isSamePosition) {\n        return;\n      }\n    }\n    rowNodeAtPixelNow.setHighlighted(highlight);\n    this.lastHighlightedRow = rowNodeAtPixelNow;\n  }\n  getHighlightPosition(pixel, rowNode) {\n    if (!rowNode) {\n      const index = this.getRowIndexAtPixel(pixel);\n      rowNode = this.getRow(index || 0);\n      if (!rowNode) {\n        return RowHighlightPosition.Below;\n      }\n    }\n    const { rowTop, rowHeight } = rowNode;\n    return pixel - rowTop < rowHeight / 2 ? RowHighlightPosition.Above : RowHighlightPosition.Below;\n  }\n  getLastHighlightedRowNode() {\n    return this.lastHighlightedRow;\n  }\n  isHighlightingCurrentPosition(movingRowNode, hoveredRowNode, highlightPosition) {\n    if (movingRowNode === hoveredRowNode) {\n      return true;\n    }\n    const diff = highlightPosition === RowHighlightPosition.Above ? -1 : 1;\n    if (this.getRow(hoveredRowNode.rowIndex + diff) === movingRowNode) {\n      return true;\n    }\n    return false;\n  }\n  clearHighlightedRow() {\n    if (this.lastHighlightedRow) {\n      this.lastHighlightedRow.setHighlighted(null);\n      this.lastHighlightedRow = null;\n    }\n  }\n  isLastRowIndexKnown() {\n    return true;\n  }\n  getRowCount() {\n    if (this.rowsToDisplay) {\n      return this.rowsToDisplay.length;\n    }\n    return 0;\n  }\n  /**\n   * Returns the number of rows with level === 1\n   */\n  getTopLevelRowCount() {\n    if (this.rowsToDisplay.length === 0) {\n      return 0;\n    }\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return 1;\n    }\n    const filteredChildren = this.rootNode.childrenAfterAggFilter;\n    const totalFooterInc = this.rootNode.sibling ? 1 : 0;\n    return (filteredChildren ? filteredChildren.length : 0) + totalFooterInc;\n  }\n  /**\n   * Get the row display index by the top level index\n   * top level index is the index of rows with level === 1\n   */\n  getTopLevelRowDisplayedIndex(topLevelIndex) {\n    const showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n    if (showingRootNode) {\n      return topLevelIndex;\n    }\n    let adjustedIndex = topLevelIndex;\n    if (this.rowsToDisplay[0].footer) {\n      if (topLevelIndex === 0) {\n        return 0;\n      }\n      adjustedIndex -= 1;\n    }\n    const lastRow = this.rowsToDisplay[this.rowsToDisplay.length - 1];\n    const indexOutsideGroupBounds = adjustedIndex >= this.rootNode.childrenAfterSort.length;\n    if (lastRow.footer && indexOutsideGroupBounds) {\n      return lastRow.rowIndex;\n    }\n    let rowNode = this.rootNode.childrenAfterSort[adjustedIndex];\n    if (this.gos.get(\"groupHideOpenParents\")) {\n      while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n        rowNode = rowNode.childrenAfterSort[0];\n      }\n    }\n    return rowNode.rowIndex;\n  }\n  getRowBounds(index) {\n    if (_missing(this.rowsToDisplay)) {\n      return null;\n    }\n    const rowNode = this.rowsToDisplay[index];\n    if (rowNode) {\n      return {\n        rowTop: rowNode.rowTop,\n        rowHeight: rowNode.rowHeight\n      };\n    }\n    return null;\n  }\n  onRowGroupOpened() {\n    const animate = _isAnimateRows(this.gos);\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP, keepRenderedRows: true, animate });\n  }\n  onFilterChanged(event) {\n    if (event.afterDataChange) {\n      return;\n    }\n    const animate = _isAnimateRows(this.gos);\n    const primaryOrQuickFilterChanged = event.columns.length === 0 || event.columns.some((col) => col.isPrimary());\n    const step = primaryOrQuickFilterChanged ? ClientSideRowModelSteps.FILTER : ClientSideRowModelSteps.FILTER_AGGREGATES;\n    this.refreshModel({ step, keepRenderedRows: true, animate });\n  }\n  onSortChanged() {\n    const animate = _isAnimateRows(this.gos);\n    this.refreshModel({\n      step: ClientSideRowModelSteps.SORT,\n      keepRenderedRows: true,\n      animate,\n      keepEditingRows: true\n    });\n  }\n  getType() {\n    return \"clientSide\";\n  }\n  onValueChanged() {\n    if (this.columnModel.isPivotActive()) {\n      this.refreshModel({ step: ClientSideRowModelSteps.PIVOT });\n    } else {\n      this.refreshModel({ step: ClientSideRowModelSteps.AGGREGATE });\n    }\n  }\n  createChangePath(rowNodeTransactions) {\n    const noTransactions = _missingOrEmpty2(rowNodeTransactions);\n    const changedPath = new ChangedPath(false, this.rootNode);\n    if (noTransactions) {\n      changedPath.setInactive();\n    }\n    return changedPath;\n  }\n  isSuppressModelUpdateAfterUpdateTransaction(params) {\n    if (!this.gos.get(\"suppressModelUpdateAfterUpdateTransaction\")) {\n      return false;\n    }\n    if (params.rowNodeTransactions == null) {\n      return false;\n    }\n    const transWithAddsOrDeletes = params.rowNodeTransactions.filter(\n      (tx) => tx.add != null && tx.add.length > 0 || tx.remove != null && tx.remove.length > 0\n    );\n    const transactionsContainUpdatesOnly = transWithAddsOrDeletes == null || transWithAddsOrDeletes.length == 0;\n    return transactionsContainUpdatesOnly;\n  }\n  buildRefreshModelParams(step) {\n    let paramsStep = ClientSideRowModelSteps.EVERYTHING;\n    const stepsMapped = {\n      everything: ClientSideRowModelSteps.EVERYTHING,\n      group: ClientSideRowModelSteps.EVERYTHING,\n      filter: ClientSideRowModelSteps.FILTER,\n      map: ClientSideRowModelSteps.MAP,\n      aggregate: ClientSideRowModelSteps.AGGREGATE,\n      filter_aggregates: ClientSideRowModelSteps.FILTER_AGGREGATES,\n      sort: ClientSideRowModelSteps.SORT,\n      pivot: ClientSideRowModelSteps.PIVOT,\n      nothing: ClientSideRowModelSteps.NOTHING\n    };\n    if (_exists(step)) {\n      paramsStep = stepsMapped[step];\n    }\n    if (_missing(paramsStep)) {\n      _errorOnce2(`invalid step ${step}, available steps are ${Object.keys(stepsMapped).join(\", \")}`);\n      return void 0;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    const modelParams = {\n      step: paramsStep,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    };\n    return modelParams;\n  }\n  refreshModel(paramsOrStep) {\n    if (!this.hasStarted || this.isRefreshingModel || this.columnModel.isChangeEventsDispatching()) {\n      return;\n    }\n    const params = typeof paramsOrStep === \"object\" && \"step\" in paramsOrStep ? paramsOrStep : this.buildRefreshModelParams(paramsOrStep);\n    if (!params) {\n      return;\n    }\n    if (this.isSuppressModelUpdateAfterUpdateTransaction(params)) {\n      return;\n    }\n    const changedPath = this.createChangePath(params.rowNodeTransactions);\n    this.isRefreshingModel = true;\n    switch (params.step) {\n      case ClientSideRowModelSteps.EVERYTHING:\n        this.doRowGrouping(\n          params.rowNodeTransactions,\n          changedPath,\n          !!params.rowNodesOrderChanged,\n          !!params.afterColumnsChanged\n        );\n      case ClientSideRowModelSteps.FILTER:\n        this.doFilter(changedPath);\n      case ClientSideRowModelSteps.PIVOT:\n        this.doPivot(changedPath);\n      case ClientSideRowModelSteps.AGGREGATE:\n        this.doAggregate(changedPath);\n      case ClientSideRowModelSteps.FILTER_AGGREGATES:\n        this.doFilterAggregates(changedPath);\n      case ClientSideRowModelSteps.SORT:\n        this.doSort(params.rowNodeTransactions, changedPath);\n      case ClientSideRowModelSteps.MAP:\n        this.doRowsToDisplay();\n    }\n    const displayedNodesMapped = this.setRowTopAndRowIndex();\n    this.clearRowTopAndRowIndex(changedPath, displayedNodesMapped);\n    this.isRefreshingModel = false;\n    this.eventService.dispatchEvent({\n      type: \"modelUpdated\",\n      animate: params.animate,\n      keepRenderedRows: params.keepRenderedRows,\n      newData: params.newData,\n      newPage: false,\n      keepUndoRedoStack: params.keepUndoRedoStack\n    });\n  }\n  isEmpty() {\n    const rowsMissing = _missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n    return _missing(this.rootNode) || rowsMissing || !this.columnModel.isReady();\n  }\n  isRowsToRender() {\n    return _exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n  }\n  getNodesInRangeForSelection(firstInRange, lastInRange) {\n    let started = false;\n    let finished = false;\n    const result = [];\n    const groupsSelectChildren = _getGroupSelectsDescendants(this.gos);\n    this.forEachNodeAfterFilterAndSort((rowNode) => {\n      if (finished) {\n        return;\n      }\n      if (started) {\n        if (rowNode === lastInRange || rowNode === firstInRange) {\n          finished = true;\n          if (rowNode.group && groupsSelectChildren) {\n            result.push(...rowNode.allLeafChildren);\n            return;\n          }\n        }\n      }\n      if (!started) {\n        if (rowNode !== lastInRange && rowNode !== firstInRange) {\n          return;\n        }\n        started = true;\n      }\n      const includeThisNode = !rowNode.group || !groupsSelectChildren;\n      if (includeThisNode) {\n        result.push(rowNode);\n        return;\n      }\n    });\n    return result;\n  }\n  // eslint-disable-next-line\n  setDatasource(datasource) {\n    _errorOnce2(\"should never call setDatasource on clientSideRowController\");\n  }\n  getTopLevelNodes() {\n    return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n  }\n  getRootNode() {\n    return this.rootNode;\n  }\n  getRow(index) {\n    return this.rowsToDisplay[index];\n  }\n  isRowPresent(rowNode) {\n    return this.rowsToDisplay.indexOf(rowNode) >= 0;\n  }\n  getRowIndexAtPixel(pixelToMatch) {\n    if (this.isEmpty() || this.rowsToDisplay.length === 0) {\n      return -1;\n    }\n    let bottomPointer = 0;\n    let topPointer = this.rowsToDisplay.length - 1;\n    if (pixelToMatch <= 0) {\n      return 0;\n    }\n    const lastNode = _last(this.rowsToDisplay);\n    if (lastNode.rowTop <= pixelToMatch) {\n      return this.rowsToDisplay.length - 1;\n    }\n    let oldBottomPointer = -1;\n    let oldTopPointer = -1;\n    while (true) {\n      const midPointer = Math.floor((bottomPointer + topPointer) / 2);\n      const currentRowNode = this.rowsToDisplay[midPointer];\n      if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n        return midPointer;\n      }\n      if (currentRowNode.rowTop < pixelToMatch) {\n        bottomPointer = midPointer + 1;\n      } else if (currentRowNode.rowTop > pixelToMatch) {\n        topPointer = midPointer - 1;\n      }\n      const caughtInInfiniteLoop = oldBottomPointer === bottomPointer && oldTopPointer === topPointer;\n      if (caughtInInfiniteLoop) {\n        return midPointer;\n      }\n      oldBottomPointer = bottomPointer;\n      oldTopPointer = topPointer;\n    }\n  }\n  isRowInPixel(rowNode, pixelToMatch) {\n    const topPixel = rowNode.rowTop;\n    const bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n    const pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n    return pixelInRow;\n  }\n  forEachLeafNode(callback) {\n    if (this.rootNode.allLeafChildren) {\n      this.rootNode.allLeafChildren.forEach((rowNode, index) => callback(rowNode, index));\n    }\n  }\n  forEachNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterGroup || []],\n      callback,\n      recursionType: 0 /* Normal */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilter(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterAggFilter || []],\n      callback,\n      recursionType: 1 /* AfterFilter */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachNodeAfterFilterAndSort(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [...this.rootNode.childrenAfterSort || []],\n      callback,\n      recursionType: 2 /* AfterFilterAndSort */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  forEachPivotNode(callback, includeFooterNodes = false) {\n    this.recursivelyWalkNodesAndCallback({\n      nodes: [this.rootNode],\n      callback,\n      recursionType: 3 /* PivotNodes */,\n      index: 0,\n      includeFooterNodes\n    });\n  }\n  // iterates through each item in memory, and calls the callback function\n  // nodes - the rowNodes to traverse\n  // callback - the user provided callback\n  // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n  // index - works similar to the index in forEach in javascript's array function\n  recursivelyWalkNodesAndCallback(params) {\n    const { nodes, callback, recursionType, includeFooterNodes } = params;\n    let { index } = params;\n    const addFooters = (position) => {\n      const parentNode = nodes[0]?.parent;\n      if (!parentNode)\n        return;\n      const grandTotal = includeFooterNodes && _getGrandTotalRow(this.gos);\n      const isGroupIncludeFooter = _getGroupTotalRowCallback(this.gos);\n      const groupTotal = includeFooterNodes && isGroupIncludeFooter({ node: parentNode });\n      const isRootNode = parentNode === this.rootNode;\n      if (isRootNode) {\n        if (grandTotal === position) {\n          parentNode.createFooter();\n          callback(parentNode.sibling, index++);\n        }\n        return;\n      }\n      if (groupTotal === position) {\n        parentNode.createFooter();\n        callback(parentNode.sibling, index++);\n      }\n    };\n    addFooters(\"top\");\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      callback(node, index++);\n      if (node.hasChildren() && !node.footer) {\n        let nodeChildren = null;\n        switch (recursionType) {\n          case 0 /* Normal */:\n            nodeChildren = node.childrenAfterGroup;\n            break;\n          case 1 /* AfterFilter */:\n            nodeChildren = node.childrenAfterAggFilter;\n            break;\n          case 2 /* AfterFilterAndSort */:\n            nodeChildren = node.childrenAfterSort;\n            break;\n          case 3 /* PivotNodes */:\n            nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n            break;\n        }\n        if (nodeChildren) {\n          index = this.recursivelyWalkNodesAndCallback({\n            nodes: [...nodeChildren],\n            callback,\n            recursionType,\n            index,\n            includeFooterNodes\n          });\n        }\n      }\n    }\n    addFooters(\"bottom\");\n    return index;\n  }\n  // it's possible to recompute the aggregate without doing the other parts\n  // + api.refreshClientSideRowModel('aggregate')\n  doAggregate(changedPath) {\n    this.aggregationStage?.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doFilterAggregates(changedPath) {\n    if (this.filterAggregatesStage) {\n      this.filterAggregatesStage.execute({ rowNode: this.rootNode, changedPath });\n    } else {\n      this.rootNode.childrenAfterAggFilter = this.rootNode.childrenAfterFilter;\n    }\n  }\n  // + gridApi.expandAll()\n  // + gridApi.collapseAll()\n  expandOrCollapseAll(expand) {\n    const usingTreeData = this.gos.get(\"treeData\");\n    const usingPivotMode = this.columnModel.isPivotActive();\n    const recursiveExpandOrCollapse = (rowNodes) => {\n      if (!rowNodes) {\n        return;\n      }\n      rowNodes.forEach((rowNode) => {\n        const actionRow = () => {\n          rowNode.expanded = expand;\n          recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n        };\n        if (usingTreeData) {\n          const hasChildren = _exists(rowNode.childrenAfterGroup);\n          if (hasChildren) {\n            actionRow();\n          }\n          return;\n        }\n        if (usingPivotMode) {\n          const notLeafGroup = !rowNode.leafGroup;\n          if (notLeafGroup) {\n            actionRow();\n          }\n          return;\n        }\n        const isRowGroup = rowNode.group;\n        if (isRowGroup) {\n          actionRow();\n        }\n      });\n    };\n    if (this.rootNode) {\n      recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n    }\n    this.refreshModel({ step: ClientSideRowModelSteps.MAP });\n    this.eventService.dispatchEvent({\n      type: \"expandOrCollapseAll\",\n      source: expand ? \"expandAll\" : \"collapseAll\"\n    });\n  }\n  doSort(rowNodeTransactions, changedPath) {\n    this.sortStage.execute({\n      rowNode: this.rootNode,\n      rowNodeTransactions,\n      changedPath\n    });\n  }\n  doRowGrouping(rowNodeTransactions, changedPath, rowNodesOrderChanged, afterColumnsChanged) {\n    if (this.groupStage) {\n      if (rowNodeTransactions) {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          rowNodeTransactions,\n          rowNodesOrderChanged,\n          changedPath\n        });\n      } else {\n        this.groupStage.execute({\n          rowNode: this.rootNode,\n          changedPath,\n          afterColumnsChanged\n        });\n      }\n      if (_getGroupSelectsDescendants(this.gos)) {\n        const selectionChanged = this.selectionService.updateGroupsFromChildrenSelections(\n          \"rowGroupChanged\",\n          changedPath\n        );\n        if (selectionChanged) {\n          this.eventService.dispatchEvent({\n            type: \"selectionChanged\",\n            source: \"rowGroupChanged\"\n          });\n        }\n      }\n    } else {\n      const rootNode = this.rootNode;\n      const sibling = rootNode.sibling;\n      rootNode.childrenAfterGroup = rootNode.allLeafChildren;\n      if (sibling) {\n        sibling.childrenAfterGroup = rootNode.childrenAfterGroup;\n      }\n      this.rootNode.updateHasChildren();\n    }\n    if (this.nodeManager.isRowCountReady()) {\n      this.rowCountReady = true;\n      this.eventService.dispatchEventOnce({\n        type: \"rowCountReady\"\n      });\n    }\n  }\n  doFilter(changedPath) {\n    this.filterStage.execute({ rowNode: this.rootNode, changedPath });\n  }\n  doPivot(changedPath) {\n    this.pivotStage?.execute({ rowNode: this.rootNode, changedPath });\n  }\n  getNodeManager() {\n    return this.nodeManager;\n  }\n  getRowNode(id) {\n    const idIsGroup = typeof id == \"string\" && id.indexOf(RowNode2.ID_PREFIX_ROW_GROUP) == 0;\n    if (idIsGroup) {\n      let res = void 0;\n      this.forEachNode((node) => {\n        if (node.id === id) {\n          res = node;\n        }\n      });\n      return res;\n    }\n    return this.nodeManager.getRowNode(id);\n  }\n  // rows: the rows to put into the model\n  setRowData(rowData) {\n    this.selectionService.reset(\"rowDataChanged\");\n    this.nodeManager.setRowData(rowData);\n    if (this.hasStarted) {\n      this.dispatchUpdateEventsAndRefresh();\n    }\n  }\n  dispatchUpdateEventsAndRefresh() {\n    this.eventService.dispatchEvent({\n      type: \"rowDataUpdated\"\n    });\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      newData: true\n    });\n  }\n  batchUpdateRowData(rowDataTransaction, callback) {\n    if (this.applyAsyncTransactionsTimeout == null) {\n      this.rowDataTransactionBatch = [];\n      const waitMillis = this.gos.get(\"asyncTransactionWaitMillis\");\n      this.applyAsyncTransactionsTimeout = window.setTimeout(() => {\n        if (this.isAlive()) {\n          this.executeBatchUpdateRowData();\n        }\n      }, waitMillis);\n    }\n    this.rowDataTransactionBatch.push({ rowDataTransaction, callback });\n  }\n  flushAsyncTransactions() {\n    if (this.applyAsyncTransactionsTimeout != null) {\n      clearTimeout(this.applyAsyncTransactionsTimeout);\n      this.executeBatchUpdateRowData();\n    }\n  }\n  executeBatchUpdateRowData() {\n    this.valueCache.onDataChanged();\n    const callbackFuncsBound = [];\n    const rowNodeTrans = [];\n    let orderChanged = false;\n    this.rowDataTransactionBatch?.forEach((tranItem) => {\n      const { rowNodeTransaction, rowsInserted } = this.nodeManager.updateRowData(tranItem.rowDataTransaction);\n      if (rowsInserted) {\n        orderChanged = true;\n      }\n      rowNodeTrans.push(rowNodeTransaction);\n      if (tranItem.callback) {\n        callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTransaction));\n      }\n    });\n    this.commonUpdateRowData(rowNodeTrans, orderChanged);\n    if (callbackFuncsBound.length > 0) {\n      window.setTimeout(() => {\n        callbackFuncsBound.forEach((func) => func());\n      }, 0);\n    }\n    if (rowNodeTrans.length > 0) {\n      this.eventService.dispatchEvent({\n        type: \"asyncTransactionsFlushed\",\n        results: rowNodeTrans\n      });\n    }\n    this.rowDataTransactionBatch = null;\n    this.applyAsyncTransactionsTimeout = void 0;\n  }\n  /**\n   * Used to apply transaction changes.\n   * Called by gridApi & rowDragFeature\n   */\n  updateRowData(rowDataTran) {\n    this.valueCache.onDataChanged();\n    const { rowNodeTransaction, rowsInserted } = this.nodeManager.updateRowData(rowDataTran);\n    this.commonUpdateRowData([rowNodeTransaction], rowsInserted);\n    return rowNodeTransaction;\n  }\n  /**\n   * Used to apply generated transaction\n   */\n  afterImmutableDataChange(rowNodeTransaction, rowNodesOrderChanged) {\n    this.commonUpdateRowData([rowNodeTransaction], rowNodesOrderChanged);\n  }\n  /**\n   * Common to:\n   * - executeBatchUpdateRowData (batch transactions)\n   * - updateRowData (single transaction)\n   * - afterImmutableDataChange (generated transaction)\n   *\n   * @param rowNodeTrans - the transactions to apply\n   * @param orderChanged - whether the order of the rows has changed, either via generated transaction or user provided addIndex\n   */\n  commonUpdateRowData(rowNodeTransactions, rowNodesOrderChanged) {\n    if (!this.hasStarted) {\n      return;\n    }\n    const animate = !this.gos.get(\"suppressAnimationFrame\");\n    this.eventService.dispatchEvent({\n      type: \"rowDataUpdated\"\n    });\n    this.refreshModel({\n      step: ClientSideRowModelSteps.EVERYTHING,\n      rowNodeTransactions,\n      rowNodesOrderChanged,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      animate\n    });\n  }\n  doRowsToDisplay() {\n    this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n  }\n  onRowHeightChanged() {\n    this.refreshModel({\n      step: ClientSideRowModelSteps.MAP,\n      keepRenderedRows: true,\n      keepEditingRows: true,\n      keepUndoRedoStack: true\n    });\n  }\n  /** This method is debounced. It is used for row auto-height. If we don't debounce,\n   * then the Row Models will end up recalculating each row position\n   * for each row height change and result in the Row Renderer laying out rows.\n   * This is particularly bad if using print layout, and showing eg 1,000 rows,\n   * each row will change it's height, causing Row Model to update 1,000 times.\n   */\n  onRowHeightChangedDebounced() {\n    this.onRowHeightChanged_debounced();\n  }\n  resetRowHeights() {\n    const atLeastOne = this.resetRowHeightsForAllRowNodes();\n    this.rootNode.setRowHeight(this.rootNode.rowHeight, true);\n    if (this.rootNode.sibling) {\n      this.rootNode.sibling.setRowHeight(this.rootNode.sibling.rowHeight, true);\n    }\n    if (atLeastOne) {\n      this.onRowHeightChanged();\n    }\n  }\n  resetRowHeightsForAllRowNodes() {\n    let atLeastOne = false;\n    this.forEachNode((rowNode) => {\n      rowNode.setRowHeight(rowNode.rowHeight, true);\n      const detailNode = rowNode.detailNode;\n      if (detailNode) {\n        detailNode.setRowHeight(detailNode.rowHeight, true);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.setRowHeight(rowNode.sibling.rowHeight, true);\n      }\n      atLeastOne = true;\n    });\n    return atLeastOne;\n  }\n  onGridStylesChanges(e) {\n    if (e.rowHeightChanged) {\n      if (this.columnModel.isAutoRowHeightActive()) {\n        return;\n      }\n      this.resetRowHeights();\n    }\n  }\n  onGridReady() {\n    if (this.hasStarted) {\n      return;\n    }\n    this.setInitialData();\n  }\n  isRowDataLoaded() {\n    return this.rowCountReady;\n  }\n  destroy() {\n    super.destroy();\n    this.clearHighlightedRow();\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/clientSideRowModelApi.ts\nimport { _warnOnce as _warnOnce2 } from \"@ag-grid-community/core\";\nfunction onGroupExpandedOrCollapsed(beans) {\n  beans.expansionService.onGroupExpandedOrCollapsed();\n}\nfunction refreshClientSideRowModel(beans, step) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.refreshModel(step);\n}\nfunction isRowDataEmpty(beans) {\n  return beans.rowModelHelperService?.getClientSideRowModel()?.isEmpty() ?? true;\n}\nfunction forEachLeafNode(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachLeafNode(callback);\n}\nfunction forEachNodeAfterFilter(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilter(callback);\n}\nfunction forEachNodeAfterFilterAndSort(beans, callback) {\n  beans.rowModelHelperService?.getClientSideRowModel()?.forEachNodeAfterFilterAndSort(callback);\n}\nfunction resetRowHeights(beans) {\n  if (beans.columnModel.isAutoRowHeightActive()) {\n    _warnOnce2(\"calling gridApi.resetRowHeights() makes no sense when using Auto Row Height.\");\n    return;\n  }\n  beans.rowModelHelperService?.getClientSideRowModel()?.resetRowHeights();\n}\nfunction applyTransaction(beans, rowDataTransaction) {\n  return beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.updateRowData(rowDataTransaction)\n  );\n}\nfunction applyTransactionAsync(beans, rowDataTransaction, callback) {\n  beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.batchUpdateRowData(rowDataTransaction, callback)\n  );\n}\nfunction flushAsyncTransactions(beans) {\n  beans.frameworkOverrides.wrapIncoming(\n    () => beans.rowModelHelperService?.getClientSideRowModel()?.flushAsyncTransactions()\n  );\n}\nfunction getBestCostNodeSelection(beans) {\n  return beans.selectionService.getBestCostNodeSelection();\n}\n\n// community-modules/client-side-row-model/src/clientSideRowModel/filterStage.ts\nimport { BeanStub as BeanStub2 } from \"@ag-grid-community/core\";\nvar FilterStage = class extends BeanStub2 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"filterStage\";\n  }\n  wireBeans(beans) {\n    this.filterManager = beans.filterManager;\n  }\n  execute(params) {\n    const { changedPath } = params;\n    this.filter(changedPath);\n  }\n  filter(changedPath) {\n    const filterActive = !!this.filterManager?.isChildFilterPresent();\n    this.filterNodes(filterActive, changedPath);\n  }\n  filterNodes(filterActive, changedPath) {\n    const filterCallback = (rowNode, includeChildNodes) => {\n      if (rowNode.hasChildren()) {\n        if (filterActive && !includeChildNodes) {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter((childNode) => {\n            const passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n            const passBecauseDataPasses = childNode.data && this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            return passBecauseChildren || passBecauseDataPasses;\n          });\n        } else {\n          rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n        }\n      } else {\n        rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterFilter = rowNode.childrenAfterFilter;\n      }\n    };\n    if (this.doingTreeDataFiltering()) {\n      const treeDataDepthFirstFilter = (rowNode, alreadyFoundInParent) => {\n        if (rowNode.childrenAfterGroup) {\n          for (let i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n            const childNode = rowNode.childrenAfterGroup[i];\n            const foundInParent = alreadyFoundInParent || this.filterManager.doesRowPassFilter({ rowNode: childNode });\n            if (childNode.childrenAfterGroup) {\n              treeDataDepthFirstFilter(rowNode.childrenAfterGroup[i], foundInParent);\n            } else {\n              filterCallback(childNode, foundInParent);\n            }\n          }\n        }\n        filterCallback(rowNode, alreadyFoundInParent);\n      };\n      const treeDataFilterCallback = (rowNode) => treeDataDepthFirstFilter(rowNode, false);\n      changedPath.executeFromRootNode(treeDataFilterCallback);\n    } else {\n      const defaultFilterCallback = (rowNode) => filterCallback(rowNode, false);\n      changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n    }\n  }\n  doingTreeDataFiltering() {\n    return this.gos.get(\"treeData\") && !this.gos.get(\"excludeChildrenWhenTreeDataFiltering\");\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/flattenStage.ts\nimport {\n  BeanStub as BeanStub3,\n  RowNode as RowNode3,\n  _exists as _exists2,\n  _getGrandTotalRow as _getGrandTotalRow2,\n  _getGroupTotalRowCallback as _getGroupTotalRowCallback2,\n  _isGroupMultiAutoColumn,\n  _missingOrEmpty as _missingOrEmpty3\n} from \"@ag-grid-community/core\";\nvar FlattenStage = class extends BeanStub3 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"flattenStage\";\n  }\n  wireBeans(beans) {\n    this.beans = beans;\n    this.columnModel = beans.columnModel;\n  }\n  execute(params) {\n    const rootNode = params.rowNode;\n    const result = [];\n    const skipLeafNodes = this.columnModel.isPivotMode();\n    const showRootNode = skipLeafNodes && rootNode.leafGroup;\n    const topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n    const details = this.getFlattenDetails();\n    this.recursivelyAddToRowsToDisplay(details, topList, result, skipLeafNodes, 0);\n    const atLeastOneRowPresent = result.length > 0;\n    const includeGrandTotalRow = !showRootNode && // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n    atLeastOneRowPresent && details.grandTotalRow;\n    if (includeGrandTotalRow) {\n      rootNode.createFooter();\n      const addToTop = details.grandTotalRow === \"top\";\n      this.addRowNodeToRowsToDisplay(details, rootNode.sibling, result, 0, addToTop);\n    }\n    return result;\n  }\n  getFlattenDetails() {\n    const groupRemoveSingleChildren = this.gos.get(\"groupRemoveSingleChildren\");\n    const groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gos.get(\"groupRemoveLowestSingleChildren\");\n    return {\n      groupRemoveLowestSingleChildren,\n      groupRemoveSingleChildren,\n      isGroupMultiAutoColumn: _isGroupMultiAutoColumn(this.gos),\n      hideOpenParents: this.gos.get(\"groupHideOpenParents\"),\n      grandTotalRow: _getGrandTotalRow2(this.gos),\n      groupTotalRow: _getGroupTotalRowCallback2(this.gos)\n    };\n  }\n  recursivelyAddToRowsToDisplay(details, rowsToFlatten, result, skipLeafNodes, uiLevel) {\n    if (_missingOrEmpty3(rowsToFlatten)) {\n      return;\n    }\n    for (let i = 0; i < rowsToFlatten.length; i++) {\n      const rowNode = rowsToFlatten[i];\n      const isParent = rowNode.hasChildren();\n      const isSkippedLeafNode = skipLeafNodes && !isParent;\n      const isRemovedSingleChildrenGroup = details.groupRemoveSingleChildren && isParent && rowNode.childrenAfterGroup.length === 1;\n      const isRemovedLowestSingleChildrenGroup = details.groupRemoveLowestSingleChildren && isParent && rowNode.leafGroup && rowNode.childrenAfterGroup.length === 1;\n      const neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n      const isHiddenOpenParent = details.hideOpenParents && rowNode.expanded && !rowNode.master && !neverAllowToExpand;\n      const thisRowShouldBeRendered = !isSkippedLeafNode && !isHiddenOpenParent && !isRemovedSingleChildrenGroup && !isRemovedLowestSingleChildrenGroup;\n      if (thisRowShouldBeRendered) {\n        this.addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel);\n      }\n      if (skipLeafNodes && rowNode.leafGroup) {\n        continue;\n      }\n      if (isParent) {\n        const excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n        if (rowNode.expanded || excludedParent) {\n          const doesRowShowFooter = details.groupTotalRow({ node: rowNode });\n          if (!doesRowShowFooter) {\n            rowNode.destroyFooter();\n          }\n          const uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n          if (doesRowShowFooter === \"top\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n          this.recursivelyAddToRowsToDisplay(\n            details,\n            rowNode.childrenAfterSort,\n            result,\n            skipLeafNodes,\n            uiLevelForChildren\n          );\n          if (doesRowShowFooter === \"bottom\") {\n            rowNode.createFooter();\n            this.addRowNodeToRowsToDisplay(details, rowNode.sibling, result, uiLevelForChildren);\n          }\n        }\n      } else if (rowNode.master && rowNode.expanded) {\n        const detailNode = this.createDetailNode(rowNode);\n        this.addRowNodeToRowsToDisplay(details, detailNode, result, uiLevel);\n      }\n    }\n  }\n  // duplicated method, it's also in floatingRowModel\n  addRowNodeToRowsToDisplay(details, rowNode, result, uiLevel, addToTop) {\n    if (addToTop) {\n      result.unshift(rowNode);\n    } else {\n      result.push(rowNode);\n    }\n    rowNode.setUiLevel(details.isGroupMultiAutoColumn ? 0 : uiLevel);\n  }\n  createDetailNode(masterNode) {\n    if (_exists2(masterNode.detailNode)) {\n      return masterNode.detailNode;\n    }\n    const detailNode = new RowNode3(this.beans);\n    detailNode.detail = true;\n    detailNode.selectable = false;\n    detailNode.parent = masterNode;\n    if (_exists2(masterNode.id)) {\n      detailNode.id = \"detail_\" + masterNode.id;\n    }\n    detailNode.data = masterNode.data;\n    detailNode.level = masterNode.level + 1;\n    masterNode.detailNode = detailNode;\n    return detailNode;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/immutableService.ts\nimport {\n  BeanStub as BeanStub4,\n  _errorOnce as _errorOnce3,\n  _exists as _exists3,\n  _getRowIdCallback as _getRowIdCallback2,\n  _isClientSideRowModel,\n  _iterateObject\n} from \"@ag-grid-community/core\";\nvar ImmutableService = class extends BeanStub4 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"immutableService\";\n  }\n  wireBeans(beans) {\n    this.rowModel = beans.rowModel;\n    this.selectionService = beans.selectionService;\n  }\n  postConstruct() {\n    if (_isClientSideRowModel(this.gos)) {\n      this.clientSideRowModel = this.rowModel;\n      this.addManagedPropertyListener(\"rowData\", () => this.onRowDataUpdated());\n    }\n  }\n  isActive() {\n    const getRowIdProvided = this.gos.exists(\"getRowId\");\n    const resetRowDataOnUpdate = this.gos.get(\"resetRowDataOnUpdate\");\n    if (resetRowDataOnUpdate) {\n      return false;\n    }\n    return getRowIdProvided;\n  }\n  setRowData(rowData) {\n    const rowDataTransaction = this.createTransactionForRowData(rowData);\n    if (!rowDataTransaction) {\n      return;\n    }\n    const nodeManager = this.clientSideRowModel.getNodeManager();\n    const { rowNodeTransaction, rowsInserted } = nodeManager.updateRowData(rowDataTransaction);\n    let orderChanged = false;\n    const suppressSortOrder = this.gos.get(\"suppressMaintainUnsortedOrder\");\n    if (!suppressSortOrder) {\n      orderChanged = nodeManager.updateRowOrderFromRowData(rowData);\n    }\n    this.clientSideRowModel.afterImmutableDataChange(rowNodeTransaction, orderChanged || rowsInserted);\n  }\n  /** Converts the setRowData() command to a transaction */\n  createTransactionForRowData(rowData) {\n    if (!_isClientSideRowModel(this.gos)) {\n      _errorOnce3(\"ImmutableService only works with ClientSideRowModel\");\n      return null;\n    }\n    const getRowIdFunc = _getRowIdCallback2(this.gos);\n    if (getRowIdFunc == null) {\n      _errorOnce3(\"ImmutableService requires getRowId() callback to be implemented, your row data needs IDs!\");\n      return null;\n    }\n    const existingNodesMap = this.clientSideRowModel.getNodeManager().getCopyOfNodesMap();\n    const remove = [];\n    const update = [];\n    const add = [];\n    if (_exists3(rowData)) {\n      rowData.forEach((data) => {\n        const id = getRowIdFunc({ data, level: 0 });\n        const existingNode = existingNodesMap[id];\n        if (existingNode) {\n          const dataHasChanged = existingNode.data !== data;\n          if (dataHasChanged) {\n            update.push(data);\n          }\n          existingNodesMap[id] = void 0;\n        } else {\n          add.push(data);\n        }\n      });\n    }\n    _iterateObject(existingNodesMap, (id, rowNode) => {\n      if (rowNode) {\n        remove.push(rowNode.data);\n      }\n    });\n    return { remove, update, add };\n  }\n  onRowDataUpdated() {\n    const rowData = this.gos.get(\"rowData\");\n    if (!rowData) {\n      return;\n    }\n    if (this.isActive()) {\n      this.setRowData(rowData);\n    } else {\n      this.selectionService.reset(\"rowDataChanged\");\n      this.clientSideRowModel.setRowData(rowData);\n    }\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortService.ts\nimport { BeanStub as BeanStub5, _errorOnce as _errorOnce4, _missing as _missing2, _warnOnce as _warnOnce3 } from \"@ag-grid-community/core\";\nvar SortService = class extends BeanStub5 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"sortService\";\n  }\n  wireBeans(beans) {\n    this.columnModel = beans.columnModel;\n    this.funcColsService = beans.funcColsService;\n    this.rowNodeSorter = beans.rowNodeSorter;\n    this.showRowGroupColsService = beans.showRowGroupColsService;\n  }\n  sort(sortOptions, sortActive, useDeltaSort, rowNodeTransactions, changedPath, sortContainsGroupColumns) {\n    const groupMaintainOrder = this.gos.get(\"groupMaintainOrder\");\n    const groupColumnsPresent = this.columnModel.getCols().some((c) => c.isRowGroupActive());\n    let allDirtyNodes = {};\n    if (useDeltaSort && rowNodeTransactions) {\n      allDirtyNodes = this.calculateDirtyNodes(rowNodeTransactions);\n    }\n    const isPivotMode = this.columnModel.isPivotMode();\n    const postSortFunc = this.gos.getCallback(\"postSortRows\");\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterAggFilter, true);\n      const skipSortingPivotLeafs = isPivotMode && rowNode.leafGroup;\n      const skipSortingGroups = groupMaintainOrder && groupColumnsPresent && !rowNode.leafGroup && !sortContainsGroupColumns;\n      if (skipSortingGroups) {\n        const nextGroup = this.funcColsService.getRowGroupColumns()?.[rowNode.level + 1];\n        const wasSortExplicitlyRemoved = nextGroup?.getSort() === null;\n        const childrenToBeSorted = rowNode.childrenAfterAggFilter.slice(0);\n        if (rowNode.childrenAfterSort && !wasSortExplicitlyRemoved) {\n          const indexedOrders = {};\n          rowNode.childrenAfterSort.forEach((node, idx) => {\n            indexedOrders[node.id] = idx;\n          });\n          childrenToBeSorted.sort(\n            (row1, row2) => (indexedOrders[row1.id] ?? 0) - (indexedOrders[row2.id] ?? 0)\n          );\n        }\n        rowNode.childrenAfterSort = childrenToBeSorted;\n      } else if (!sortActive || skipSortingPivotLeafs) {\n        rowNode.childrenAfterSort = rowNode.childrenAfterAggFilter.slice(0);\n      } else if (useDeltaSort) {\n        rowNode.childrenAfterSort = this.doDeltaSort(rowNode, allDirtyNodes, changedPath, sortOptions);\n      } else {\n        rowNode.childrenAfterSort = this.rowNodeSorter.doFullSort(rowNode.childrenAfterAggFilter, sortOptions);\n      }\n      if (rowNode.sibling) {\n        rowNode.sibling.childrenAfterSort = rowNode.childrenAfterSort;\n      }\n      this.updateChildIndexes(rowNode);\n      if (postSortFunc) {\n        const params = { nodes: rowNode.childrenAfterSort };\n        postSortFunc(params);\n      }\n    };\n    if (changedPath) {\n      changedPath.forEachChangedNodeDepthFirst(callback);\n    }\n    this.updateGroupDataForHideOpenParents(changedPath);\n  }\n  calculateDirtyNodes(rowNodeTransactions) {\n    const dirtyNodes = {};\n    const addNodesFunc = (rowNodes) => {\n      if (rowNodes) {\n        rowNodes.forEach((rowNode) => dirtyNodes[rowNode.id] = true);\n      }\n    };\n    if (rowNodeTransactions) {\n      rowNodeTransactions.forEach((tran) => {\n        addNodesFunc(tran.add);\n        addNodesFunc(tran.update);\n        addNodesFunc(tran.remove);\n      });\n    }\n    return dirtyNodes;\n  }\n  doDeltaSort(rowNode, allTouchedNodes, changedPath, sortOptions) {\n    const unsortedRows = rowNode.childrenAfterAggFilter;\n    const oldSortedRows = rowNode.childrenAfterSort;\n    if (!oldSortedRows) {\n      return this.rowNodeSorter.doFullSort(unsortedRows, sortOptions);\n    }\n    const untouchedRowsMap = {};\n    const touchedRows = [];\n    unsortedRows.forEach((row) => {\n      if (allTouchedNodes[row.id] || !changedPath.canSkip(row)) {\n        touchedRows.push(row);\n      } else {\n        untouchedRowsMap[row.id] = true;\n      }\n    });\n    const sortedUntouchedRows = oldSortedRows.filter((child) => untouchedRowsMap[child.id]);\n    const mapNodeToSortedNode = (rowNode2, pos) => ({\n      currentPos: pos,\n      rowNode: rowNode2\n    });\n    const sortedChangedRows = touchedRows.map(mapNodeToSortedNode).sort((a, b) => this.rowNodeSorter.compareRowNodes(sortOptions, a, b));\n    return this.mergeSortedArrays(sortOptions, sortedChangedRows, sortedUntouchedRows.map(mapNodeToSortedNode)).map(\n      ({ rowNode: rowNode2 }) => rowNode2\n    );\n  }\n  // Merge two sorted arrays into each other\n  mergeSortedArrays(sortOptions, arr1, arr2) {\n    const res = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n      const compareResult = this.rowNodeSorter.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n      if (compareResult < 0) {\n        res.push(arr1[i++]);\n      } else {\n        res.push(arr2[j++]);\n      }\n    }\n    while (i < arr1.length) {\n      res.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n      res.push(arr2[j++]);\n    }\n    return res;\n  }\n  updateChildIndexes(rowNode) {\n    if (_missing2(rowNode.childrenAfterSort)) {\n      return;\n    }\n    const listToSort = rowNode.childrenAfterSort;\n    for (let i = 0; i < listToSort.length; i++) {\n      const child = listToSort[i];\n      const firstChild = i === 0;\n      const lastChild = i === rowNode.childrenAfterSort.length - 1;\n      child.setFirstChild(firstChild);\n      child.setLastChild(lastChild);\n      child.setChildIndex(i);\n    }\n  }\n  updateGroupDataForHideOpenParents(changedPath) {\n    if (!this.gos.get(\"groupHideOpenParents\")) {\n      return;\n    }\n    if (this.gos.get(\"treeData\")) {\n      _warnOnce3(\n        `The property hideOpenParents dose not work with Tree Data. This is because Tree Data has values at the group level, it doesn't make sense to hide them.`\n      );\n      return false;\n    }\n    const callback = (rowNode) => {\n      this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n      rowNode.childrenAfterSort.forEach((child) => {\n        if (child.hasChildren()) {\n          callback(child);\n        }\n      });\n    };\n    if (changedPath) {\n      changedPath.executeFromRootNode((rowNode) => callback(rowNode));\n    }\n  }\n  pullDownGroupDataForHideOpenParents(rowNodes, clearOperation) {\n    if (!this.gos.get(\"groupHideOpenParents\") || _missing2(rowNodes)) {\n      return;\n    }\n    rowNodes.forEach((childRowNode) => {\n      const groupDisplayCols = this.showRowGroupColsService?.getShowRowGroupCols() ?? [];\n      groupDisplayCols.forEach((groupDisplayCol) => {\n        const showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n        if (typeof showRowGroup !== \"string\") {\n          _errorOnce4(\n            \"groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup\"\n          );\n          return;\n        }\n        const displayingGroupKey = showRowGroup;\n        const rowGroupColumn = this.columnModel.getColDefCol(displayingGroupKey);\n        const thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n        if (thisRowNodeMatches) {\n          return;\n        }\n        if (clearOperation) {\n          childRowNode.setGroupValue(groupDisplayCol.getId(), void 0);\n        } else {\n          const parentToStealFrom = this.getFirstChildOfFirstChild(childRowNode, rowGroupColumn);\n          if (parentToStealFrom) {\n            childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n          }\n        }\n      });\n    });\n  }\n  getFirstChildOfFirstChild(node, rowGroupColumn) {\n    let currentRowNode = node;\n    while (currentRowNode) {\n      const parentRowNode = currentRowNode.parent;\n      if (parentRowNode && currentRowNode.firstChild) {\n        if (parentRowNode.rowGroupColumn === rowGroupColumn) {\n          return parentRowNode;\n        }\n      } else {\n        return null;\n      }\n      currentRowNode = parentRowNode;\n    }\n    return null;\n  }\n};\n\n// community-modules/client-side-row-model/src/clientSideRowModel/sortStage.ts\nimport { BeanStub as BeanStub6, _exists as _exists4, _isColumnsSortingCoupledToGroup } from \"@ag-grid-community/core\";\nvar SortStage = class extends BeanStub6 {\n  constructor() {\n    super(...arguments);\n    this.beanName = \"sortStage\";\n  }\n  wireBeans(beans) {\n    this.sortService = beans.sortService;\n    this.sortController = beans.sortController;\n  }\n  execute(params) {\n    const sortOptions = this.sortController.getSortOptions();\n    const sortActive = _exists4(sortOptions) && sortOptions.length > 0;\n    const deltaSort = sortActive && _exists4(params.rowNodeTransactions) && // in time we can remove this check, so that delta sort is always\n    // on if transactions are present. it's off for now so that we can\n    // selectively turn it on and test it with some select users before\n    // rolling out to everyone.\n    this.gos.get(\"deltaSort\");\n    const sortContainsGroupColumns = sortOptions.some((opt) => {\n      const isSortingCoupled = _isColumnsSortingCoupledToGroup(this.gos);\n      if (isSortingCoupled) {\n        return opt.column.isPrimary() && opt.column.isRowGroupActive();\n      }\n      return !!opt.column.getColDef().showRowGroup;\n    });\n    this.sortService.sort(\n      sortOptions,\n      sortActive,\n      deltaSort,\n      params.rowNodeTransactions,\n      params.changedPath,\n      sortContainsGroupColumns\n    );\n  }\n};\n\n// community-modules/client-side-row-model/src/version.ts\nvar VERSION = \"32.3.3\";\n\n// community-modules/client-side-row-model/src/clientSideRowModelModule.ts\nvar ClientSideRowModelCoreModule = _defineModule({\n  version: VERSION,\n  moduleName: `${ModuleNames.ClientSideRowModelModule}-core`,\n  rowModel: \"clientSide\",\n  beans: [ClientSideRowModel, FilterStage, SortStage, FlattenStage, SortService, ImmutableService]\n});\nvar ClientSideRowModelApiModule = _defineModule({\n  version: VERSION,\n  moduleName: `${ModuleNames.ClientSideRowModelModule}-api`,\n  beans: [RowModelHelperService],\n  apiFunctions: {\n    onGroupExpandedOrCollapsed,\n    refreshClientSideRowModel,\n    isRowDataEmpty,\n    forEachLeafNode,\n    forEachNodeAfterFilter,\n    forEachNodeAfterFilterAndSort,\n    resetRowHeights,\n    applyTransaction,\n    applyTransactionAsync,\n    flushAsyncTransactions,\n    getBestCostNodeSelection\n  },\n  dependantModules: [ClientSideRowModelCoreModule, _CsrmSsrmSharedApiModule]\n});\nvar ClientSideRowModelModule = _defineModule({\n  version: VERSION,\n  moduleName: ModuleNames.ClientSideRowModelModule,\n  dependantModules: [ClientSideRowModelCoreModule, ClientSideRowModelApiModule]\n});\nexport {\n  ClientSideRowModelModule\n};\n"],
  "mappings": "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",
  "names": []
}
